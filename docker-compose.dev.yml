version: '3.4'

#x-cache-from:
#  - &api-cache-from
#    cache_from:
#      - ${NGINX_IMAGE:-quay.io/api-platform/nginx}
#      - ${PHP_IMAGE:-quay.io/api-platform/php}

services:
  php:
    container_name: php
    restart: always
    build:
      context: ./api
      target: api_platform_php
    #      <<: *api-cache-from
    #    image: ${PHP_IMAGE:-quay.io/api-platform/php}
    healthcheck:
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    environment:
      - APP_DEBUG=${APP_DEBUG:-0}
      - APP_ENV=${APP_ENV:-prod}
      - APP_SECRET=${APP_SECRET:?APP_SECRET is not set or empty}
      - CORS_ALLOW_ORIGIN=${CORS_ALLOW_ORIGIN:?CORS_ALLOW_ORIGIN is not set or empty}
      - DATABASE_URL=${DATABASE_URL:?DATABASE_URL is not set or empty}
      - MERCURE_JWT_SECRET=${MERCURE_JWT_SECRET:?MERCURE_JWT_SECRET is not set or empty}
      - MERCURE_SUBSCRIBE_URL=${MERCURE_SUBSCRIBE_URL:?MERCURE_SUBSCRIBE_URL is not set or empty}
      - TRUSTED_HOSTS=${TRUSTED_HOSTS:?TRUSTED_HOSTS is not set or empty}
      - TRUSTED_PROXIES=${TRUSTED_PROXIES:-10.0.0.0/8,172.16.0.0/12,192.168.0.0/16}
    depends_on:
      - db
    volumes:
      - ./api:/srv/api:rw,cached
      - ./api/docker/php/conf.d/api-platform.dev.ini:/usr/local/etc/php/conf.d/api-platform.ini
      # if you develop on Linux, you may use a bind-mounted host directory instead
      # - ./api/var:/srv/api/var:rw
  #      - dev-certs:/certs:ro,nocopy

  cache-proxy:
    build:
      context: ./api
      target: api_platform_varnish
    depends_on:
      - api
    environment:
      - VIRTUAL_HOST=${API_HOST:?API_HOST is not set or empty}
    tmpfs:
      - /usr/local/var/varnish:exec

  api:
    container_name: api
    build:
      context: ./api
      target: api_platform_nginx
    #      <<: *api-cache-from
    #    image: ${NGINX_IMAGE:-quay.io/api-platform/nginx}
    depends_on:
      - php
    volumes:
      - ./api/public:/srv/api/public:ro

  vulcain:
    container_name: vulcain
    image: dunglas/vulcain
    environment:
      #      - CERT_FILE=/certs/localhost.crt
      #      - KEY_FILE=/certs/localhost.key
      - UPSTREAM=http://api
    depends_on:
      - api
  #    volumes:
  #      - dev-certs:/certs:ro,nocopy
  #    ports:
  #      - target: 443
  #        published: 8443
  #        protocol: tcp

  db:
    container_name: postgresql
    restart: always
    image: postgres:12-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-api}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is not set or empty}
      - POSTGRES_USER=${POSTGRES_USER:-admin}
    volumes:
      #      - db-data:/var/lib/postgresql/data:rw
      # you may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      - ./api/docker/db/data:/var/lib/postgresql/data:rw
  #    ports:
  #      - target: 5432
  #        published: 5432
  #        protocol: tcp

  mercure:
    container_name: mercure
    image: dunglas/mercure
    environment:
      - ALLOW_ANONYMOUS=${MERCURE_ALLOW_ANONYMOUS:?MERCURE_ALLOW_ANONYMOUS is not set or empty}
      - CORS_ALLOWED_ORIGINS=${MERCURE_CORS_ALLOWED_ORIGINS:?MERCURE_CORS_ALLOWED_ORIGINS is not set or empty}
      - JWT_KEY=${MERCURE_JWT_KEY:?MERCURE_JWT_KEY is not set or empty}
      - VIRTUAL_HOST=${MERCURE_HOST:?MERCURE_HOST is not set or empty}
  #    depends_on:
  #      - dev-tls
  #    volumes:
  #      - dev-certs:/certs:ro,nocopy
  #    ports:
  #      - target: 443
  #        published: 1337
  #        protocol: tcp

  client:
    container_name: client_dev
    build:
      context: ./client
      target: api_platform_client_development
    #      cache_from:
    #        - ${CLIENT_IMAGE:-quay.io/api-platform/client}
    #    image: ${CLIENT_IMAGE:-quay.io/api-platform/client}
    tty: true # https://github.com/facebook/create-react-app/issues/8688
    environment:
      - VIRTUAL_HOST=${CLIENT_HOST:?CLIENT_HOST is not set or empty}
    expose:
      - 80
    #    depends_on:
    #      - dev-tls
    volumes:
      - ./client:/usr/src/client:rw,cached
  #      - dev-certs:/usr/src/client/node_modules/webpack-dev-server/ssl:rw,nocopy
  #    ports:
  #      - target: 3000
  #        published: 443
  #        protocol: tcp

  app:
    container_name: app
    build:
      context: ./app
      args:
        - NODE_VERSION=13
        - NGINX_VERSION=1.17
      target: api_platform_app_development
    #      Only for swarm mode
    #      cache_from:
    #        - ${ADMIN_IMAGE:-quay.io/api-platform/admin}
    #    image: ${ADMIN_IMAGE:-quay.io/api-platform/admin}
    tty: true # https://github.com/facebook/create-react-app/issues/8688
    #    depends_on:
    #      - dev-tls
    environment:
      - VIRTUAL_HOST=${APP_HOST:?APP_HOST is not set or empty}
    expose:
      - 80
    volumes:
      - ./app:/usr/src/app:rw,cached
        #      - dev-certs:/usr/src/app/node_modules/webpack-dev-server/ssl:rw,nocopy
        #    ports:
        #      - target: 4200
        #        published: 447
        #        protocol: tcp

        #  dev-tls:
        #    container_name: START
        #    build:
        #      context: ./docker/dev-tls
        #    volumes:
        #      - dev-certs:/certs:rw
        #    ports:
        #      - target: 80
        #        published: 80
        #        protocol: tcp

        #  app:
        #    build:
        #      context: ./app
        #      target: api_platform_app_nginx
        #    expose:
        #      - 80
        #    environment:
        #      - "VIRTUAL_HOST=test.domain.com"
        #
        #  client:
        #    build:
        #      context: ./client
        #      target: api_platform_client_nginx
        #    expose:
        #      - 80
        #    environment:
        #      - "VIRTUAL_HOST=blog.domain.com"

  nginx-proxy:
    image: jwilder/nginx-proxy:alpine
    restart: always
    ports:
      - target: 80
        published: 80
        protocol: tcp
      - target: 443
        published: 443
        protocol: tcp
    volumes:
      #      - ./docker/nginx-proxy/certs:/etc/nginx/certs:ro
      - ./docker/nginx-proxy/vhost.d:/etc/nginx/vhost.d:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro

#volumes:
#  db-data: {}
#  dev-certs: {}

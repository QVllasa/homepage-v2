server {
    root /srv/api/public;
    client_max_body_size 100M;




    location / {
        # try to serve file directly, fallback to index.php
        try_files $uri /index.php$is_args$args;
    }

    location ~ ^/index\.php(/|$) {
        #set_by_lua $upstream_host 'return os.getenv("UPSTREAM") or "php:9000"';
        #fastcgi_pass $upstream_host;
        #resolver local=on;

        fastcgi_pass php:9000;


        # Increase the buffer size to handle large cache invalidation headers
        fastcgi_buffer_size 256k;
        fastcgi_buffers 8 128k;


        #prevent 504
        fastcgi_send_timeout 600;
        fastcgi_read_timeout 600;

        proxy_connect_timeout  600;
        proxy_send_timeout    600;
        proxy_read_timeout    600;
        send_timeout      600;

        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;

        # When you are using symlinks to link the document root to the
        # current version of your application, you should pass the real
        # application path instead of the path to the symlink to PHP
        # FPM.
        # Otherwise, PHP's OPcache may not properly detect changes to
        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
        # for more information).
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;

        # Prevents URIs that include the front controller. This will 404:
        # http://domain.tld/index.php/some-path
        # Remove the internal directive to allow URIs like this
        internal;
    }

#    location /media/ {
#         root /srv/api/public/;
#        autoindex on;
#     }
    location /media/ {
        root /srv/api/public/;

        #prevent 504
        fastcgi_send_timeout 600;
        fastcgi_read_timeout 600;

        proxy_connect_timeout  600;
        proxy_send_timeout    600;
        proxy_read_timeout    600;
        send_timeout      600;

        client_max_body_size 100M;
            # Einfache CORS-Anforderungen
            if ($request_method = 'GET') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Expose-Headers' 'Content-Length, Content-Type';
            }

            # CORS-Preflight-Anforderungen
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';

                # Hinweis: Platzhalter bei `Access-Control-Allow-Headers` wird möglicherweise noch nicht von allen Browsern unterstützt.
                add_header 'Access-Control-Allow-Headers' '*';

                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            try_files $uri =404;
    }

    # return 404 for all other php files not matching the front controller
    # this prevents access to other php files you don't want to be accessible.
    location ~ \.php$ {
      return 404;
    }

    # URL for health checks
    location /nginx-health {
      access_log off;
      default_type text/plain;
      return 200 "healthy\n";
    }


}



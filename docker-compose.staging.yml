version: '3.4'

services:
  php:
    restart: always
    image: ${PHP_IMAGE:?PHP_IMAGE is not set or empty}
    build:
      context: ./api
      target: api_platform_php
    healthcheck:
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    environment:
      - APP_DEBUG=${APP_DEBUG:-0}
      - APP_ENV=${APP_ENV:-prod}
      - APP_SECRET=${APP_SECRET:?APP_SECRET is not set or empty}
      - CORS_ALLOW_ORIGIN=${CORS_ALLOW_ORIGIN:?CORS_ALLOW_ORIGIN is not set or empty}
      - DATABASE_URL=${DATABASE_URL:?DATABASE_URL is not set or empty}
      - TRUSTED_HOSTS=${TRUSTED_HOSTS:?TRUSTED_HOSTS is not set or empty}
      - TRUSTED_PROXIES=${TRUSTED_PROXIES:-10.0.0.0/8,172.16.0.0/12,192.168.0.0/16}
    depends_on:
      - db
    volumes:
      - media-volume:/srv/api/public/media:rw
    
  admin:
    image: ${NGINX_IMAGE:?NGINX_IMAGE is not set or empty}
    build:
      context: ./api
      target: api_platform_nginx
    depends_on:
      - php
    volumes:
      - media-volume:/srv/api/public/media:rw

  cache-proxy:
    image: ${VARNISH_IMAGE:?VARNISH_IMAGE is not set or empty}
    build:
      context: ./api
      target: api_platform_varnish
    depends_on:
      - admin
    environment:
      - VIRTUAL_HOST=${API_HOST:?API_HOST is not set or empty}
    tmpfs:
      - /usr/local/var/varnish:exec

  db:
    restart: always
    image: postgres:12-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-api}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is not set or empty}
      - POSTGRES_USER=${POSTGRES_USER:-admin}
    volumes:
      - ./api/docker/db/data:/var/lib/postgresql/data:rw

  app:
    image: ${APP_IMAGE:?APP_IMAGE is not set or empty}
    build:
      context: ./app
      target: api_platform_app_nginx
    environment:
      - VIRTUAL_HOST=${APP_HOST:?APP_HOST is not set or empty}
    expose:
      - 80

        
  nginx-proxy:
    build: 
      context: ./docker-compose-prod/docker/nginx-proxy
    restart: always
    ports:
      - target: 80
        published: 80
        protocol: tcp
      - target: 443
        published: 443
        protocol: tcp
    volumes:
      - ./docker/nginx-proxy/vhost.d:/etc/nginx/vhost.d:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro


volumes:
  media-volume: {}

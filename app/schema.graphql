# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

"A node, according to the Relay specification."
interface Node {
    "The id of this node."
    id: ID!
}

type AboutMe implements Node {
    _id: Int!
    id: ID!
    quote: String!
    text: String!
}

type Banner implements Node {
    _id: Int!
    id: ID!
    path: String!
    title: String!
}

"Connection for Banner."
type BannerConnection {
    edges: [BannerEdge]
    pageInfo: BannerPageInfo!
    totalCount: Int!
}

"Edge of Banner."
type BannerEdge {
    cursor: String!
    node: Banner
}

"Information about the current page."
type BannerPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type Category implements Node {
    _id: Int!
    id: ID!
    projects(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ProjectConnection
    title: String!
}

"Connection for Category."
type CategoryConnection {
    edges: [CategoryEdge]
    pageInfo: CategoryPageInfo!
    totalCount: Int!
}

"Edge of Category."
type CategoryEdge {
    cursor: String!
    node: Category
}

"Information about the current page."
type CategoryPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type Client implements Node {
    _id: Int!
    cssClass: Iterable
    homepage: String!
    id: ID!
    image: String
    name: String!
    projects(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ProjectConnection
}

"Connection for Client."
type ClientConnection {
    edges: [ClientEdge]
    pageInfo: ClientPageInfo!
    totalCount: Int!
}

"Edge of Client."
type ClientEdge {
    cursor: String!
    node: Client
}

"Information about the current page."
type ClientPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type Experience implements Node {
    _id: Int!
    company: String!
    companyUrl: String
    date: String!
    description: String!
    function: String!
    id: ID!
}

"Connection for Experience."
type ExperienceConnection {
    edges: [ExperienceEdge]
    pageInfo: ExperiencePageInfo!
    totalCount: Int!
}

"Edge of Experience."
type ExperienceEdge {
    cursor: String!
    node: Experience
}

"Information about the current page."
type ExperiencePageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type ProfilImage implements Node {
    _id: Int!
    id: ID!
    path: String!
    title: String!
}

type Project implements Node {
    _id: Int!
    category(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): CategoryConnection
    client: Client
    createdAt: String!
    description: String!
    id: ID!
    image: String
    imagePath: String
    keys: Iterable
    thumbnail: String
    title: String!
}

"Connection for Project."
type ProjectConnection {
    edges: [ProjectEdge]
    pageInfo: ProjectPageInfo!
    totalCount: Int!
}

"Edge of Project."
type ProjectEdge {
    cursor: String!
    node: Project
}

"Information about the current page."
type ProjectPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type Query {
    aboutMe(id: ID!): AboutMe
    banners(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): BannerConnection
    categories(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): CategoryConnection
    category(id: ID!): Category
    client(id: ID!): Client
    clients(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ClientConnection
    experience(id: ID!): Experience
    experiences(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ExperienceConnection
    node(id: ID!): Node
    profilImage(id: ID!): ProfilImage
    project(id: ID!): Project
    projects(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ProjectConnection
    service(id: ID!): Service
    services(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ServiceConnection
    skill(id: ID!): Skill
    skills(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): SkillConnection
    stack(id: ID!): Stack
    stacks(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): StackConnection
}

type Service implements Node {
    _id: Int!
    icon: String!
    id: ID!
    keys: Iterable
    quote: String
    shortText: String!
    title: String!
}

"Connection for Service."
type ServiceConnection {
    edges: [ServiceEdge]
    pageInfo: ServicePageInfo!
    totalCount: Int!
}

"Edge of Service."
type ServiceEdge {
    cursor: String!
    node: Service
}

"Information about the current page."
type ServicePageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type Skill implements Node {
    _id: Int!
    id: ID!
    title: String!
    value: Int!
}

"Connection for Skill."
type SkillConnection {
    edges: [SkillEdge]
    pageInfo: SkillPageInfo!
    totalCount: Int!
}

"Edge of Skill."
type SkillEdge {
    cursor: String!
    node: Skill
}

"Information about the current page."
type SkillPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type Stack implements Node {
    contentUrl: String
    id: ID!
    title: String!
    url: String!
}

"Connection for Stack."
type StackConnection {
    edges: [StackEdge]
    pageInfo: StackPageInfo!
    totalCount: Int!
}

"Edge of Stack."
type StackEdge {
    cursor: String!
    node: Stack
}

"Information about the current page."
type StackPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}


"The `Iterable` scalar type represents an array or a Traversable with any kind of data."
scalar Iterable
